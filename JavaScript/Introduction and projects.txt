Hi Ketan, Good Evening,

I'm Namrata Kudache, a Frontend Developer with 2+ years of experience in JavaScript and React.js. I specialize in building high-performance web applications and focused on user experience and responsive design.

I've worked on projects like:
âœ… OSIONE â€“ A web-based business management application for timesheets, leave tracking, invoicing, and resource management.
âœ… Vibrant Living â€“ An e-commerce food ordering delivery platform.

My Key Responsibilities:
âœ” Developing reusable and interactive React components (tables, buttons, dropdowns).
âœ” Optimizing UI performance (lazy loading, code splitting, useMemo(), useCallback(), React.memo).
âœ” Enhancing API efficiency (debouncing for search, throttling for event handling).
âœ” Implementing state management techniques using Context API and Redux for scalability.

I'm excited about this opportunity and look forward to contributing to your team!
Thank you.

Current Work: Leave Request Feature in OSIONE
ðŸš€ Iâ€™m currently working on implementing a Leave Request feature in OSIONE, allowing employees to submit leave requests, track approvals, and view their leave balance.

My Contributions:
âœ” Building a user-friendly leave request form in React.js with TypeScript for better validations.
âœ” Integrating APIs to submit leave requests and retrieve approval status.
âœ” Implementing form validation to prevent invalid inputs (e.g., selecting past dates).
âœ” Adding real-time updates so users see status changes instantly without refreshing the page (using React Query).
âœ” Optimizing state management with React Context to reduce unnecessary re-renders.

 Challenge: Handling API Errors & Network Failures
Problem:
APIs sometimes failed due to network issues, resulting in a bad user experience.

Solution:
âœ… Implemented Axios Interceptors to handle errors globally.
âœ… Graceful Error Handling with React Query.
âœ… Displayed user-friendly error messages instead of just console errors.

 Axios interceptors is used to streamline API calls. We added a request interceptor to automatically attach JWT tokens to all requests, ensuring authentication. We also implemented a response interceptor to handle errors globally, redirecting users if they are unauthorized. Additionally, we integrated a refresh token mechanism to renew expired tokens, preventing frequent logouts and enhancing user experience."

 What is a Custom Hook?
A custom hook is a reusable JS function in React that encapsulates stateful logic and can be shared across multiple components. It starts with the prefix "use" (e.g., useAuth, useFetch, useDebounce).

ðŸ“Œ Why use Custom Hooks?
âœ” Reusability â€“ Avoid repeating the same logic in multiple components.
âœ” Separation of concerns â€“ Keeps components clean by moving logic to a separate file.
âœ” Better maintainability â€“ Any change to logic updates all components that use the hook.
ðŸ”¹ Problem:
We need to fetch data from an API in multiple components, but writing fetch() logic everywhere leads to duplicate code.

ðŸ”¹ Solution:
Create a custom hook useFetch that:

Fetches data from an API.
Handles loading, error, and response state.
Automatically re-fetches when the API URL changes.


React Query is a powerful data-fetching library that simplifies API calls, caching, and state management in React applications.
Why Use React Query?
âœ… Simplifies API Calls â€“ No need for manual useEffect or useState for API calls.
âœ… Automatic Caching â€“ Prevents unnecessary requests by caching API responses.
âœ… Background Refetching â€“ Keeps data up to date without a full page reload.
âœ… Error Handling â€“ Built-in retry mechanisms for failed requests.
âœ… Infinite Scrolling & Pagination â€“ Efficient data loading for large lists.